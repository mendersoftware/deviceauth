// Copyright 2020 Northern.tech AS
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by mockery v2.1.0. DO NOT EDIT.

package mocks

import (
	context "context"

	ratelimits "github.com/mendersoftware/go-lib-micro/ratelimits"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// CacheLimits provides a mock function with given fields: ctx, l, tid, id, idtype
func (_m *Cache) CacheLimits(ctx context.Context, l ratelimits.ApiLimits, tid string, id string, idtype string) error {
	ret := _m.Called(ctx, l, tid, id, idtype)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ratelimits.ApiLimits, string, string, string) error); ok {
		r0 = rf(ctx, l, tid, id, idtype)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CacheToken provides a mock function with given fields: ctx, tid, id, idtype, token, expireSec
func (_m *Cache) CacheToken(ctx context.Context, tid string, id string, idtype string, token string, expireSec time.Duration) error {
	ret := _m.Called(ctx, tid, id, idtype, token, expireSec)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, time.Duration) error); ok {
		r0 = rf(ctx, tid, id, idtype, token, expireSec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteToken provides a mock function with given fields: ctx, tid, id, idtype
func (_m *Cache) DeleteToken(ctx context.Context, tid string, id string, idtype string) error {
	ret := _m.Called(ctx, tid, id, idtype)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, tid, id, idtype)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FlushDB provides a mock function with given fields: ctx
func (_m *Cache) FlushDB(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLimits provides a mock function with given fields: ctx, tid, id, idtype
func (_m *Cache) GetLimits(ctx context.Context, tid string, id string, idtype string) (*ratelimits.ApiLimits, error) {
	ret := _m.Called(ctx, tid, id, idtype)

	var r0 *ratelimits.ApiLimits
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *ratelimits.ApiLimits); ok {
		r0 = rf(ctx, tid, id, idtype)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ratelimits.ApiLimits)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, tid, id, idtype)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Throttle provides a mock function with given fields: ctx, rawToken, l, tid, id, idtype, url, action
func (_m *Cache) Throttle(ctx context.Context, rawToken string, l ratelimits.ApiLimits, tid string, id string, idtype string, url string, action string) (string, error) {
	ret := _m.Called(ctx, rawToken, l, tid, id, idtype, url, action)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, ratelimits.ApiLimits, string, string, string, string, string) string); ok {
		r0 = rf(ctx, rawToken, l, tid, id, idtype, url, action)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ratelimits.ApiLimits, string, string, string, string, string) error); ok {
		r1 = rf(ctx, rawToken, l, tid, id, idtype, url, action)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
